name: Expo Android APK Build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-android-apk:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Node.js (using an LTS version; here we use Node 16)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # 3. Install project dependencies
      - name: Install dependencies
        run: npm install

      # 4. Run EAS Build to generate an Android APK using the 'preview' profile
      #    The "--non-interactive" flag prevents prompts,
      #    and "--wait" makes the CLI wait until the build is complete.
      - name: Build Android APK with EAS
        run: npx eas build --platform android --profile preview --non-interactive --wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # 5. Download the APK artifact from the most recent finished build
      - name: Download APK Artifact
        run: |
          # Get the most recent finished Android build details in JSON format.
          BUILD_INFO=$(npx eas build:list --platform android --status finished --limit 1 --json)
          echo "$BUILD_INFO"

          # Use jq to extract the artifact URL.
          ARTIFACT_URL=$(echo "$BUILD_INFO" | jq -r '.[0].artifacts.buildUrl')
          echo "Artifact URL: $ARTIFACT_URL"

          # Download the APK from the artifact URL.
          curl -L -o app.apk "$ARTIFACT_URL"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # 6. Upload the generated APK as an artifact in GitHub Actions
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: expo-android-apk
          path: app.apk
